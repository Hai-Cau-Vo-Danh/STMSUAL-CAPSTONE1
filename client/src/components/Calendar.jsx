import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Calendar as BigCalendar, momentLocalizer, Views } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import './Calendar.css'; // File CSS ƒë√£ c·∫≠p nh·∫≠t
import { BsChevronLeft, BsChevronRight } from 'react-icons/bs';

// C·∫•u h√¨nh moment
import 'moment/locale/vi';
moment.locale('vi');
const localizer = momentLocalizer(moment);

// L·∫•y user ID
const getUserId = () => {
    try {
        const u = localStorage.getItem("user");
        return u ? JSON.parse(u)?.user_id : null;
    } catch (e) {
        console.error("L·ªói l·∫•y user ID:", e); return null;
    }
};

// --- COMPONENT T√ôY CH·ªàNH CHO TASK CARD ---
const CustomEvent = ({ event }) => {
  const formatTime = (time) => moment(time).format('HH:mm');
  // L·∫•y class m√†u t·ª´ event object (do eventPropGetter g√°n v√†o)
  const eventTypeClass = event.className || 'event-default';

  return (
    // √Åp d·ª•ng class m√†u tr·ª±c ti·∫øp v√†o wrapper
    <div className={`custom-event-wrapper ${eventTypeClass}`}>
      <div className="custom-event-time">
        {`${formatTime(event.start)} - ${formatTime(event.end)}`}
      </div>
      <div className="custom-event-title">
        {event.title}
      </div>
      <div className="custom-event-avatars">
        {/* Placeholder - Th√™m logic avatar th·∫≠t n·∫øu c·∫ßn */}
        <span>üë§</span>
      </div>
    </div>
  );
};

// --- COMPONENT CHO MODAL S·ª∞ KI·ªÜN ---
const EventModal = ({ event, onClose, onSave, onDelete }) => {
  // State ri√™ng cho form trong modal
  const [title, setTitle] = useState(event?.title || '');
  // Format dates for datetime-local input, handling potential timezone issues implicitly by using local time
  const [startTime, setStartTime] = useState(event?.start ? moment(event.start).format('YYYY-MM-DDTHH:mm') : moment().format('YYYY-MM-DDTHH:mm'));
  const [endTime, setEndTime] = useState(event?.end ? moment(event.end).format('YYYY-MM-DDTHH:mm') : moment().add(1, 'hour').format('YYYY-MM-DDTHH:mm'));
  const [description, setDescription] = useState(event?.description || '');
  const [color, setColor] = useState(event?.color || 'default'); // State for color
  const [isDeleting, setIsDeleting] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const isNewEvent = !event?.id && !event?.event_id;

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (moment(endTime).isBefore(moment(startTime))) {
        alert("Th·ªùi gian k·∫øt th√∫c kh√¥ng th·ªÉ tr∆∞·ªõc th·ªùi gian b·∫Øt ƒë·∫ßu!");
        return;
    }
    setIsSaving(true);
    const eventData = {
      ...event,
      title,
      // Convert local datetime-local string back to Date object (will be UTC upon stringification)
      start: new Date(startTime),
      end: new Date(endTime),
      description,
      color: color, // Include color
      user_id: getUserId()
    };
    try {
      await onSave(eventData);
    } catch (error) {
       alert(`L·ªói l∆∞u s·ª± ki·ªán: ${error.message}`);
       setIsSaving(false);
    }
  };

  const handleDelete = async () => {
    if (isNewEvent || !window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·ª± ki·ªán "${event.title}"?`)) {
      return;
    }
    setIsDeleting(true);
     try {
        await onDelete(event.event_id || event.id);
     } catch (error) {
        alert(`L·ªói x√≥a s·ª± ki·ªán: ${error.message}`);
        setIsDeleting(false);
     }
  };

  // --- Giao di·ªán Modal ---
  return (
    <div className="event-modal-overlay" onClick={onClose}>
      <div className="event-modal-content" onClick={(e) => e.stopPropagation()}>
        <h2>{isNewEvent ? 'T·∫°o s·ª± ki·ªán m·ªõi' : 'Chi ti·∫øt s·ª± ki·ªán'}</h2>
        <form onSubmit={handleSubmit}>
          {/* Title Input */}
          <div className="form-group">
            <label htmlFor="event-title">Ti√™u ƒë·ªÅ:</label>
            <input id="event-title" type="text" value={title} onChange={(e) => setTitle(e.target.value)} required placeholder="Th√™m ti√™u ƒë·ªÅ..." />
          </div>
          {/* Time Inputs */}
          <div className="form-group time-group">
             <div>
                <label htmlFor="event-start">B·∫Øt ƒë·∫ßu:</label>
                <input id="event-start" type="datetime-local" value={startTime} onChange={(e) => setStartTime(e.target.value)} required />
             </div>
             <div>
                <label htmlFor="event-end">K·∫øt th√∫c:</label>
                <input id="event-end" type="datetime-local" value={endTime} onChange={(e) => setEndTime(e.target.value)} required />
             </div>
          </div>
           {/* Description Input */}
          <div className="form-group">
            <label htmlFor="event-description">N·ªôi dung:</label>
            <textarea id="event-description" value={description} onChange={(e) => setDescription(e.target.value)} rows="3" placeholder="Th√™m m√¥ t·∫£..." ></textarea>
          </div>
          {/* Color Selector (Example) */}
          <div className="form-group">
              <label htmlFor="event-color">M√†u s·∫Øc:</label>
              <select id="event-color" value={color} onChange={(e) => setColor(e.target.value)}>
                  <option value="default">M·∫∑c ƒë·ªãnh (Xanh d∆∞∆°ng)</option>
                  <option value="green">Xanh l√°</option>
                  <option value="orange">Cam</option>
                  <option value="yellow">V√†ng</option>
                  <option value="purple">T√≠m</option>
                  <option value="pink">H·ªìng</option>
                  <option value="blue">Xanh d∆∞∆°ng nh·∫°t</option>
              </select>
          </div>
          {/* Actions */}
          <div className="modal-actions">
            {!isNewEvent && ( <button type="button" className="delete-btn" onClick={handleDelete} disabled={isDeleting || isSaving}> {isDeleting ? 'ƒêang x√≥a...' : 'X√≥a'} </button> )}
            <button type="button" onClick={onClose} disabled={isSaving || isDeleting}>H·ªßy</button>
            <button type="submit" className="save-btn" disabled={isSaving || isDeleting}> {isSaving ? 'ƒêang l∆∞u...' : (isNewEvent ? 'T·∫°o' : 'L∆∞u thay ƒë·ªïi')} </button>
          </div>
        </form>
      </div>
    </div>
  );
};


// --- COMPONENT L·ªäCH CH√çNH ---
const MyCalendar = () => {
  const [events, setEvents] = useState([]);
  const [currentView, setCurrentView] = useState(Views.WEEK);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);

  // --- H√†m g·ªçi API ---
  const fetchEvents = useCallback(async (start, end) => {
    const userId = getUserId();
    if (!userId) {
      setError("Ch∆∞a ƒëƒÉng nh·∫≠p");
      setEvents([]);
      return;
    }
    setLoading(true);
    setError(null); // Clear previous error
    try {
      const startISO = start.toISOString();
      const endISO = end.toISOString();

      console.log(`[API Call] Fetching events for user ${userId} from ${startISO} to ${endISO}`);
      const response = await fetch(`/api/calendar/events?userId=${userId}&start=${startISO}&end=${endISO}`);

      // Check if response is ok FIRST
      if (!response.ok) {
        let errorMsg = `L·ªói HTTP: ${response.status}`;
        try {
            // Try to parse error JSON from backend
            const errData = await response.json();
            errorMsg = errData.message || errorMsg;
        } catch (parseError) {
             // If response is not JSON (like HTML error page), read as text
             console.error("Response was not JSON:", parseError);
             try {
                const textError = await response.text();
                // Avoid showing full HTML page as error
                if (textError.toLowerCase().includes('<!doctype html')) {
                    errorMsg += " (Server returned HTML error page)";
                } else {
                    errorMsg += `: ${textError.substring(0, 100)}...`; // Show snippet
                }
             } catch {}
        }
        throw new Error(errorMsg);
      }

      // Only parse JSON if response is ok
      const data = await response.json();
      console.log("[API Response] Events received:", data);

      // ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu cho BigCalendar
      const formattedEvents = data.map(ev => ({
        ...ev,
        id: ev.event_id || ev.id,
        title: ev.title,
       start: new Date(ev.start), 
       end: new Date(ev.end),     // Parse ISO string from backend
        description: ev.description,
        type: ev.color || ev.type || 'default', // Use 'color' field from backend
        color: ev.color || 'default', // Also store color directly if needed
        // Keep other original fields from backend if necessary
        
      }));
      setEvents(formattedEvents);

    } catch (err) {
      console.error("L·ªói fetch s·ª± ki·ªán:", err);
      setError(`Kh√¥ng th·ªÉ t·∫£i s·ª± ki·ªán: ${err.message}.`); // Don't show mock data on error
      setEvents([]); // Show empty calendar on error
    } finally {
      setLoading(false);
    }
  }, []); // Remove date/view dependency

  // --- useEffect ƒë·ªÉ fetch s·ª± ki·ªán ---
  useEffect(() => {
    console.log("Date or View changed, fetching events...");
    const { start, end } = getRange(currentDate, currentView);
    fetchEvents(start, end);
  }, [currentDate, currentView, fetchEvents]);

  // --- C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán ---
  const handleSelectSlot = useCallback(({ start, end }) => {
    setSelectedEvent({ start, end });
    setIsModalOpen(true);
  }, []);

  const handleSelectEvent = useCallback((event) => {
    setSelectedEvent(event);
    setIsModalOpen(true);
  }, []);

  // --- C√°c h√†m ƒëi·ªÅu khi·ªÉn Header ---
  const handleNavigate = useCallback((action) => {
      let newDate = currentDate;
      let unit = 'day';
      if(currentView === Views.WEEK) unit = 'week';
      if(currentView === Views.MONTH) unit = 'month';
      if (action === 'PREV') newDate = moment(currentDate).subtract(1, unit).toDate();
      else if (action === 'NEXT') newDate = moment(currentDate).add(1, unit).toDate();
      else if (action === 'TODAY') newDate = new Date();
      setCurrentDate(newDate);
  }, [currentDate, currentView]);

  const handleViewChange = useCallback((newView) => { setCurrentView(newView); }, []);

  // --- H√†m g√°n class m√†u ---
  const eventPropGetter = useCallback((event) => {
      const eventType = event.type || event.color || 'default'; // Use type or color
      return { className: `event-${eventType}` };
  }, []);

  // --- H√ÄM X·ª¨ L√ù L∆ØU S·ª∞ KI·ªÜN (G·ªåI API - UNCOMMENTED) ---
  const handleSaveEvent = useCallback(async (eventData) => {
    const isNew = !eventData.id && !eventData.event_id;
    const url = isNew ? '/api/calendar/events' : `/api/calendar/events/${eventData.event_id || eventData.id}`;
    const method = isNew ? 'POST' : 'PUT';

    console.log(`[API Call] ${method} ${url}`, eventData);
    try {
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ // G·ª≠i ƒë√∫ng format backend mong ƒë·ª£i
                user_id: eventData.user_id,
                title: eventData.title,
                description: eventData.description,
                start_time: eventData.start.toISOString(), // G·ª≠i ISO string (UTC)
                end_time: eventData.end.toISOString(),     // G·ª≠i ISO string (UTC)
                color: eventData.color // G·ª≠i m√†u
            }),
        });
        if (!response.ok) {
            const errData = await response.json();
            throw new Error(errData.message || `HTTP error ${response.status}`);
        }
        console.log("[API Response] Save successful");
        // L∆∞u th√†nh c√¥ng
        setIsModalOpen(false);
        setSelectedEvent(null);
        // T·∫£i l·∫°i danh s√°ch s·ª± ki·ªán
        const { start, end } = getRange(currentDate, currentView);
        fetchEvents(start, end); // Fetch l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t UI

    } catch (error) {
        console.error("L·ªói l∆∞u s·ª± ki·ªán:", error);
        throw error; // N√©m l·ªói ƒë·ªÉ modal hi·ªÉn th·ªã alert
    }
  }, [currentDate, currentView, fetchEvents]);

  // --- H√ÄM X·ª¨ L√ù X√ìA S·ª∞ KI·ªÜN (G·ªåI API - UNCOMMENTED) ---
  const handleDeleteEvent = useCallback(async (eventId) => {
    const userId = getUserId();
    if (!eventId || !userId) {
        console.error("Missing eventId or userId for deletion");
        throw new Error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh s·ª± ki·ªán ho·∫∑c ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a.");
    };

    const url = `/api/calendar/events/${eventId}?userId=${userId}`;

    console.log(`[API Call] DELETE ${url}`);
    try {
        const response = await fetch(url, { method: 'DELETE' });
        if (!response.ok) {
            const errData = await response.json();
            throw new Error(errData.message || `HTTP error ${response.status}`);
        }
        console.log("[API Response] Delete successful");
        // X√≥a th√†nh c√¥ng
        setIsModalOpen(false);
        setSelectedEvent(null);
        // T·∫£i l·∫°i danh s√°ch s·ª± ki·ªán
        const { start, end } = getRange(currentDate, currentView);
        fetchEvents(start, end); // Fetch l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t UI

    } catch (error) {
        console.error("L·ªói x√≥a s·ª± ki·ªán:", error);
        throw error; // N√©m l·ªói ƒë·ªÉ modal hi·ªÉn th·ªã alert
    }
  }, [currentDate, currentView, fetchEvents]);

  // Hi·ªÉn th·ªã ng√†y th√°ng tr√™n header
  const DateDisplayLabel = useMemo(() => {
    if (currentView === Views.MONTH) return moment(currentDate).format('MMMM, YYYY');
    if (currentView === Views.WEEK) {
        const start = moment(currentDate).startOf('week').format('D');
        const end = moment(currentDate).endOf('week').format('D MMMM, YYYY');
        return `${start} - ${end}`;
    }
    if (currentView === Views.DAY) return moment(currentDate).format('dddd, D MMMM, YYYY');
    return moment(currentDate).format('MMMM, YYYY');
  }, [currentDate, currentView]);

  return (
    <div className="calendar-container">

      {/* --- HEADER --- */}
      <div className="calendar-header">
          <div className="header-left">
              <button className="nav-today-btn" onClick={() => handleNavigate('TODAY')}>H√¥m nay</button>
              <div className="nav-buttons">
                  <button title="Tr∆∞·ªõc" onClick={() => handleNavigate('PREV')}><BsChevronLeft /></button>
                  <button title="Sau" onClick={() => handleNavigate('NEXT')}><BsChevronRight /></button>
              </div>
              <span className="date-display-label">{DateDisplayLabel}</span>
          </div>
          <div className="header-right">
              <div className="view-tabs">
                  <button className={currentView === Views.DAY ? 'active' : ''} onClick={() => handleViewChange(Views.DAY)}>Ng√†y</button>
                  <button className={currentView === Views.WEEK ? 'active' : ''} onClick={() => handleViewChange(Views.WEEK)}>Tu·∫ßn</button>
                  <button className={currentView === Views.MONTH ? 'active' : ''} onClick={() => handleViewChange(Views.MONTH)}>Th√°ng</button>
              </div>
              <button
                  className="create-btn"
                  onClick={() => {
                      const defaultStart = moment().add(1, 'hour').startOf('hour');
                      setSelectedEvent({ start: defaultStart.toDate(), end: defaultStart.add(1, 'hour').toDate() });
                      setIsModalOpen(true);
                  }}
              >
                  T·∫°o s·ª± ki·ªán
              </button>
          </div>
      </div>

      {/* --- Calendar Content --- */}
      <div className="calendar-content">
        {loading && <p className="loading-text">ƒêang t·∫£i...</p>}
        {!loading && error && <p className="error-text">{error}</p>}

        <BigCalendar
          localizer={localizer}
          events={events} // Lu√¥n hi·ªÉn th·ªã events (c√≥ th·ªÉ r·ªóng n·∫øu l·ªói)
          startAccessor="start"
          endAccessor="end"
          style={{ flex: 1 }}

          toolbar={false}
          view={currentView}
          date={currentDate}

          onNavigate={() => {}} // Use custom header buttons
          onView={() => {}}   // Use custom header buttons

          onSelectSlot={handleSelectSlot}
          onSelectEvent={handleSelectEvent}
          selectable

          components={{
            event: CustomEvent,
            week: { header: CustomWeekHeader },
            day: { header: CustomWeekHeader }
          }}
          eventPropGetter={eventPropGetter}

          timeslots={1}
          step={60}
          min={moment().hour(4).minute(0).toDate()}
          max={moment().hour(22).minute(0).toDate()}

          messages={{
                next: "Sau", previous: "Tr∆∞·ªõc", today: "H√¥m nay",
                month: "Th√°ng", week: "Tu·∫ßn", day: "Ng√†y", agenda: "L·ªãch tr√¨nh",
                date: "Ng√†y", time: "Gi·ªù", event: "S·ª± ki·ªán",
                noEventsInRange: "Kh√¥ng c√≥ s·ª± ki·ªán n√†o trong kho·∫£ng n√†y.",
                showMore: total => `+ ${total} th√™m`
          }}
        />
      </div>

      {/* --- EVENT MODAL --- */}
      {isModalOpen && (
        <EventModal
          event={selectedEvent}
          onClose={() => { setIsModalOpen(false); setSelectedEvent(null); }}
          onSave={handleSaveEvent}
          onDelete={handleDeleteEvent}
        />
      )}

    </div>
  );
}; // End MyCalendar

// Component t√πy ch·ªânh cho Header c·ªôt
const CustomWeekHeader = ({ label, date }) => (
    <div className="custom-week-header">
        {/* S·ª¨A 'dddd' th√†nh 'ddd' */}
        <span className="day-name">{moment(date).format('ddd').toUpperCase()}</span>
        <span className="day-number">{moment(date).format('DD')}</span>
    </div>
);


// H√†m helper t√≠nh to√°n ph·∫°m vi ng√†y/tu·∫ßn/th√°ng
const getRange = (date, view) => {
    if (view === Views.MONTH) {
        const startOfMonth = moment(date).startOf('month');
        const endOfMonth = moment(date).endOf('month');
        return { start: startOfMonth.startOf('week').toDate(), end: endOfMonth.endOf('week').toDate() };
    }
    if (view === Views.WEEK) {
        return { start: moment(date).startOf('week').toDate(), end: moment(date).endOf('week').toDate() };
    }
    return { start: moment(date).startOf('day').toDate(), end: moment(date).endOf('day').toDate() };
};

// H√†m t·∫°o d·ªØ li·ªáu m·∫´u (ch·ªâ d√πng khi fetch l·ªói)
const getMockData = (currentDate) => [
     { id: 'mock-1', title: 'M·∫´u: H·ªçp team', start: moment(currentDate).startOf('week').add(1, 'day').hour(9).toDate(), end: moment(currentDate).startOf('week').add(1, 'day').hour(10).toDate(), type: 'green' },
     { id: 'mock-2', title: 'M·∫´u: Deadline b√°o c√°o', start: moment(currentDate).startOf('week').add(3, 'day').hour(14).toDate(), end: moment(currentDate).startOf('week').add(3, 'day').hour(15).toDate(), type: 'orange' },
];


export default MyCalendar;